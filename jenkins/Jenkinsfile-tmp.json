pipeline {
  agent none
  options {
    skipStagesAfterUnstable()
    skipDefaultCheckout()
  }
  environment {
    IMAGE_BASE = 'anshelen/microservices-backend'
    IMAGE_TAG = "v$BUILD_NUMBER"
    IMAGE_NAME = "${env.IMAGE_BASE}:${env.IMAGE_TAG}"
    IMAGE_NAME_LATEST = "${env.IMAGE_BASE}:latest"
    DOCKERFILE_NAME = "Dockerfile-packaged"
  }
  stages {
    stage("Prepare container") {
      agent {
        docker {
          image 'openjdk:11.0.5-slim'
          args '-v $HOME/.m2:/root/.m2'
        }
      }
      stages {
        stage('Build') {
          steps {
            checkout scm
            sh './mvnw compile'
          }
        }
        stage('Test') {
          steps {
            sh './mvnw test'
            junit '**/target/surefire-reports/TEST-*.xml'
          }
        }
        stage('Package') {
          steps {
            sh './mvnw package -DskipTests'
          }
        }
      }
    }

    stage('Push images') {
      agent any
      when {
        branch 'master'
      }
      steps {
        script {
          def dockerImage = docker.build("${env.IMAGE_NAME}", "-f ${env.DOCKERFILE_NAME} .")
          docker.withRegistry('', 'dockerhub-creds') {
            dockerImage.push()
            dockerImage.push("latest")
          }
          echo "Pushed Docker Image: ${env.IMAGE_NAME}"
        }
        sh "docker rmi ${env.IMAGE_NAME} ${env.IMAGE_NAME_LATEST}"
      }
    }

    stage('Trigger kubernetes') {
      agent any
      when {
        branch 'master'
      }
      steps {
        withKubeConfig([credentialsId: 'kubernetes-creds', serverUrl: "${CLUSTER_URL}", namespace: "${CLUSTER_NAMESPACE}"]) {
          sh "helm upgrade ${HELM_PROJECT} ${HELM_CHART} --reuse-values --set backend.image.tag=${env.IMAGE_TAG}"
        }
      }
    }
  }
}

#	post {
#		always {
#			sh 'docker logout'
#		}
#	}

sh 'sudo chown jenkins:jenkins /home/jenkins/.docker -R'
				sh 'sudo chmod g+rwx "$HOME/.docker" -R'


		stage('Kubernetes') {
            steps {
                echo " ============== Change app-deploy =================="
                withKubeConfig([credentialsId: '871301e2-acf3-4c85-9a94-aa674ab0cc1c']) {

                    sh 'kubectl delete deploy app-deployment'
                    sh "kubectl delete app-dip"
                    sh "kubectl apply -f kube/kube_app.yaml"
                }
            }
        }
	}



withKubeConfig([credentialsId: '5711acea-40f4-4509-84a1-31905eefd83d', serverUrl: 'https://3F819F8F7E5C8FE3DC2DD201132A33BB.gr7.eu-central-1.eks.amazonaws.com'])  {
                    sh 'kubectl delete deploy app-deployment'
                    sh "kubectl delete app-dip"
                    sh "kubectl apply -f kube/kube_app.yaml"
                }